using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace WpfApp2
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();

            // 로딩 패널을 숨김
            LoadingPanel.Visibility = Visibility.Collapsed;
            // 그레이스케일 버튼 비활성화
            GrayScaleButton.IsEnabled = false;
        }

        private void OpenImage_Click(object sender, RoutedEventArgs e)
        {
            var openFileDialog = new Microsoft.Win32.OpenFileDialog
            {
                Filter = "Image Files|*.jpg;*.jpeg;*.png;*.bmp",
                Title = "이미지 파일 선택"
            };

            if(openFileDialog.ShowDialog() == true )
            {
                try
                {
                    var bitmapImage = new BitmapImage();
                    bitmapImage.BeginInit();
                    bitmapImage.CacheOption = BitmapCacheOption.OnLoad; // 메모리에 완전히 로드
                    bitmapImage.UriSource = new Uri(openFileDialog.FileName);
                    bitmapImage.EndInit();
                    bitmapImage.Freeze(); // 스레드 안전성을 위해 고정
                    ImageView.Source = bitmapImage;

                    //그레이스케일 버튼 활성화
                    GrayScaleButton.IsEnabled = true;

                    // 상태표시줄에 파일경로 출력
                    FilePathTextBlock.Text = openFileDialog.FileName;
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"이미지를 로드하는 중 오류가 발생했습니다: {ex.Message}",
                        "오류", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private async void GrayScale_Click(object sender, RoutedEventArgs e)
        {
            if (ImageView.Source is BitmapImage bitmapImage)
            {
                try
                {
                    // 처리중 보이기
                    LoadingPanel.Visibility = Visibility.Visible;

                    WriteableBitmap writeableBitmap = null;
                    int width = 0, height = 0;

                    // UI 스레드에서 WriteableBitmap 생성 및 크기 가져오기
                    Application.Current.Dispatcher.Invoke(() =>
                    {
                        writeableBitmap = new WriteableBitmap(bitmapImage);
                        width = writeableBitmap.PixelWidth;
                        height = writeableBitmap.PixelHeight;
                    });

                    if (writeableBitmap == null || width == 0 || height == 0)
                        throw new InvalidOperationException("WriteableBitmap이 유효하지 않습니다.");

                    // 시작 시간 기록
                    var startTime = DateTime.Now;

                    // 비동기적으로 그레이스케일 변환
                    await Task.Run(() => ConvertToGrayScale(writeableBitmap, width, height, startTime));

                    // UI 스레드에서 WriteableBitmap 업데이트
                    Application.Current.Dispatcher.Invoke(() =>
                    {
                        writeableBitmap.Freeze();
                        ImageView.Source = writeableBitmap;
                    });
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"이미지를 그레이스케일로 변환하는 중 오류가 발생했습니다: {ex.Message}",
                        "오류", MessageBoxButton.OK, MessageBoxImage.Error);
                }
                finally
                {
                    // 처리중 숨기기
                    LoadingPanel.Visibility = Visibility.Collapsed;

                    // 그레이스케일 버튼 비활성화
                    GrayScaleButton.IsEnabled = false;
                }
            }
            else
            {
                MessageBox.Show("이미지가 로드되지 않았습니다.", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void ConvertToGrayScale(WriteableBitmap writeableBitmap, int width, int height, DateTime startTime)
        {
            var pixelData = new byte[width * height * 4];

            // UI 스레드에서 픽셀 데이터를 복사
            Application.Current.Dispatcher.Invoke(() =>
            {
                writeableBitmap.CopyPixels(pixelData, width * 4, 0);
            });            

            Parallel.For(0, height, y =>
            {
                for (int x = 0; x < width; x++)
                {
                    int pixelIndex = (y * width + x) * 4;
                    byte a = pixelData[pixelIndex + 3];
                    byte r = pixelData[pixelIndex + 2];
                    byte g = pixelData[pixelIndex + 1];
                    byte b = pixelData[pixelIndex];

                    byte gray = (byte)(0.3 * r + 0.59 * g + 0.11 * b);

                    pixelData[pixelIndex + 3] = a;    // Alpha
                    pixelData[pixelIndex + 2] = gray; // Red
                    pixelData[pixelIndex + 1] = gray; // Green
                    pixelData[pixelIndex] = gray;     // Blue
                }

                // 처리된 시간 계산
                //var elapsedTime = DateTime.Now - startTime;
                //var processedRows = y + 1; // 현재 처리된 줄
                //var totalRows = height;
                //var processingSpeed = (processedRows / elapsedTime.TotalSeconds).ToString("F2"); // 초당 처리된 줄 수

                // UI 스레드에서 상태 표시줄에 처리 속도 업데이트
                //Application.Current.Dispatcher.Invoke(() =>
                //{
                //    ProcessTimeTextBlock.Text = $"처리 중: {processedRows}/{totalRows} 줄, 속도: {processingSpeed} 줄/초";
                //});
            });

            // 최종 처리 시간 계산
            var totalElapsedTime = DateTime.Now - startTime;


            // UI 스레드에서 픽셀 데이터를 다시 씀
            Application.Current.Dispatcher.Invoke(() =>
            {
                writeableBitmap.Lock();
                writeableBitmap.WritePixels(new Int32Rect(0, 0, width, height), pixelData, width * 4, 0);
                writeableBitmap.Unlock();

                ProcessTimeTextBlock.Text = $"그레이스케일 처리 시간: {totalElapsedTime.TotalSeconds:F2}초";
            });            
        }
    }
}
