1. 프로젝트 설계
1) 목적 : 간단한 사용자 관리, 재고 관리, 주문 관리를 한다.
2) 개발도구 : Visual studio 2022, MSSQL EXPRESS 2022
3) 시스템설계
3-1) 전체
/ERPSystem (솔루션)
 ├── ERPSystem.API           → ASP.NET Core Web API (백엔드)
 ├── ERPSystem.Application   → 비즈니스 로직, CQRS 패턴 적용
 ├── ERPSystem.Domain        → 도메인 모델, 엔티티, 인터페이스
 └── ERPSystem.Infrastructure → 데이터베이스, 외부 연동 (EF Core)
3-2) 상세
/ERPSystem (솔루션)
|
AuthServer                         → 인증서버 프로젝트                   
|   ├── appsettings.json            
|   ├── AuthServer.http
|   └── Program.cs
ERPSystem.API                      → API 요청을 처리하는 프로젝트
|   ├── Controllers                → API 컨트롤러들
|   │   ├── ProductsController.cs
|   │   ├── OrdersController.cs
|   │   └── InventoryController.cs
|   ├── Middleware                 → 예외 처리 미들웨어
|   │   └── ValidationExceptionMiddleware.cs
|   ├── Configuration              → 설정 관련 클래스들
|   │   └── AppSettings.cs
|   ├── Extensions                 ㅍ 서비스 확장 메서드
|   │   └── ServiceExtensions.cs
|   ├── Profiles                   → OrdersDto와 CreateOrderCommand, UpdateOrderCommand 간의 매핑을 자동화하기 위해 AutoMapper 프로파일을 설정
|   │   └── OrdersProfile.cs
|   ├── Startup.cs                 → 앱 초기 설정 및 서비스 등록
|   └── Program.cs                 → 프로그램 진입점
ERPSystem.Domain
├── Entities
│   ├── Users.cs          → users 테이블
│   ├── Products.cs       → products 테이블
│   ├── Orders.cs         → orders 테이블
│   ├── OrderDetails.cs   → order_details 테이블
│   └── Inventory.cs      → inventories 테이블
├── Interfaces
│   ├── IUsersRepository.cs         → IUsersRepository 인터페이스
│   ├── IProductsRepository.cs      → IProductsRepository 인터페이스
│   ├── IOrdersRepository.cs        → IOrdersRepository 인터페이스
│   ├── IOrderDetailsRepository.cs  → IOrderDetailsRepository 인터페이스
│   └── IInventoryRepository.cs   → IInventoriesRepository 인터페이스
├── Enums
|   └── OrderStatus.cs    → 주문 상태(Enum)
ERPSystem.Application
├── Common
│   ├── Behaviors
│   │   ├── LoggingBehavior.cs → 요청이 처리되기 전에 로그를 남기고, 요청이 끝난 후 응답을 로그로 기록
│   │   ├── ValidationBehavior.cs → 유효성 검사 로직을 구현하는 클래스
│   │   └── PerformanceBehavior.cs → 성능 관련 정보를 로깅하는 클래스
│   ├── Exceptions
│   │   ├── ValidationException.cs → 유효성 검사 오류를 캡슐화하여, 오류가 발생한 필드와 해당 오류 메시지를 관리
│   │   ├── NotFoundException.cs → 데이터가 없을 때 발생하는 예외 처리
│   │   └── CustomException.cs → 커스텀 예외를 처리하는 클래스
│   ├── Mappings
│   │   ├── OrderProfile.cs → `Order` 엔티티와 `OrderDto` 간의 변환을 처리하는 AutoMapper 프로필
│   │   ├── ProductProfile.cs → `Product` 엔티티와 `ProductDto` 간의 변환을 처리하는 AutoMapper 프로필
│   │   └── UserProfile.cs → `User` 엔티티와 `UserDto` 간의 변환을 처리하는 AutoMapper 프로필
│   └── Validators
│       ├── CreateOrderValidator.cs → `Order` 생성 유효성 검사를 담당
│       ├── CreateProductValidator.cs → `Product` 생성 유효성 검사를 담당
│       └── CreateUserValidator.cs → `User` 생성 유효성 검사를 담당
├── DTOs
│   ├── OrdersDto.cs → 주문 정보를 전송하는 데이터 전송 객체
│   ├── ProductsDto.cs → 제품 정보를 전송하는 데이터 전송 객체
|   ├── InventoryDto.cs
│   └── UsersDto.cs → 사용자 정보를 전송하는 데이터 전송 객체
├── Features
│   ├── Orders
│   │   ├── Commands
│   │   │   ├── CreateOrderCommand.cs → 주문 생성 명령 처리
│   │   │   ├── UpdateOrderCommand.cs → 주문 업데이트 명령 처리
│   │   │   └── DeleteOrderCommand.cs → 주문 삭제 명령 처리
│   │   ├── Queries
│   │   │   ├── GetOrderByIdQuery.cs → ID로 주문을 조회하는 쿼리
│   │   │   └── GetAllOrdersQuery.cs → 모든 주문을 조회하는 쿼리
│   ├── Products
│   │   ├── Commands
│   │   │   ├── CreateProductCommand.cs → 제품 생성 명령 처리
│   │   │   ├── UpdateProductCommand.cs → 제품 업데이트 명령 처리
│   │   │   └── DeleteProductCommand.cs → 제품 삭제 명령 처리
│   │   ├── Queries
│   │   │   ├── GetProductByIdQuery.cs → ID로 제품을 조회하는 쿼리
│   │   │   └── GetAllProductsQuery.cs → 모든 제품을 조회하는 쿼리
│   ├── Users
│   │   ├── Commands
│   │   │   ├── CreateUserCommand.cs → 사용자 생성 명령 처리
│   │   │   ├── UpdateUserCommand.cs → 사용자 업데이트 명령 처리
│   │   │   └── DeleteUserCommand.cs → 사용자 삭제 명령 처리
│   │   ├── Queries
│   │   │   ├── GetUserByIdQuery.cs → ID로 사용자 정보를 조회하는 쿼리
│   │   │   └── GetAllUsersQuery.cs → 모든 사용자 정보를 조회하는 쿼리
├── Interfaces
|   ├── IUnitOfWork.cs              → 트랜잭션 처리를 위한 유닛 오브 워크 인터페이스
|   ├── IOrdersRepository.cs        → `Order` 엔티티에 대한 데이터 액세스를 담당하는 인터페이스
|   ├── IProductsRepository.cs      → `Product` 엔티티에 대한 데이터 액세스를 담당하는 인터페이스
|   ├── IUsersRepository.cs         → `User` 엔티티에 대한 데이터 액세스를 담당하는 인터페이스
|   ├── IOrdersService.cs           → `Order` 관련 비즈니스 로직을 처리하는 서비스 인터페이스
|   ├── IProductsService.cs         → `Product` 관련 비즈니스 로직을 처리하는 서비스 인터페이스
|   ├── IUsersService.cs            → `User` 관련 비즈니스 로직을 처리하는 서비스 인터페이스
|   ├── IOrdersCommandHandler.cs    → `Order` 명령 처리 핸들러 인터페이스
|   ├── IProductsCommandHandler.cs  → `Product` 명령 처리 핸들러 인터페이스
|   ├── IUsersCommandHandler.cs     → `User` 명령 처리 핸들러 인터페이스
|   ├── IOrdersQueryHandler.cs      → `Order` 쿼리 처리 핸들러 인터페이스
|   ├── IProductsQueryHandler.cs    → `Product` 쿼리 처리 핸들러 인터페이스
|   ├── IUsersQueryHandler.cs       → `User` 쿼리 처리 핸들러 인터페이스
|   ├── IInventoryService.cs        → `Inventory` 관련 비즈니스 로직을 처리하는 서비스 인터페이스
|   ├── IInventoryRepository.cs     → `Inventory` 엔티티에 대한 데이터 액세스를 담당하는 인터페이스
|   ├── IInventoryCommandHandler.cs → `Inventory` 명령 처리 핸들러 인터페이스
|   └── IInventoryQueryHandler.cs   → `Inventory` 쿼리 처리 핸들러 인터페이스
ERPSystem.Infrastructure
|   ├──Data
|   |   └── ApplicationDbContext.cs
|   └── Interfaces
|       └── IApplicationDbContext.cs
ERPSystem-Frontend
├── public
├── src
│   ├── components  // React 컴포넌트
│   │   ├── Users
│   │   │   ├── UserList.js        → 사용자 목록
│   │   │   └── UserForm.js        → 사용자 생성/수정 폼
│   │   ├── Products
│   │   │   ├── ProductList.js
│   │   │   └── ProductForm.js
│   │   ├── Orders
│   │   │   ├── OrderList.js
│   │   │   └── OrderForm.js
│   ├── services
│   │   └── apiService.js         → API 호출 서비스
│   ├── App.js                    → 메인 앱 파일
│   └── index.js                  → React 앱 진입점
└── package.json

4) DB설계
- Users	사용자 정보 관리 (권한 포함)
- Products	제품 정보 (이름, 가격, 재고)
- Orders	주문 정보 (고객, 상태, 날짜)
- OrderDetails	주문 상세 정보 (주문 ID, 제품, 수량, 금액)
- Inventory	재고 트랜잭션 (입고, 출고 기록)

ERD (데이터베이스 관계)
Users (UserId) 1 ─── * Orders (UserId)
Orders (OrderId) 1 ─── * OrderDetails (OrderId)
Products (ProductId) 1 ─── * OrderDetails (ProductId)
Products (ProductId) 1 ─── * Inventory (ProductId)

CREATE DATABASE ERPSystem;
GO

USE ERPSystem;
GO

CREATE TABLE Users (
    UserId INT IDENTITY(1,1) PRIMARY KEY,
    UserName NVARCHAR(100) NOT NULL,
    Email NVARCHAR(255) UNIQUE NOT NULL,
    PasswordHash NVARCHAR(255) NOT NULL,
    Role NVARCHAR(50) CHECK (Role IN ('Admin', 'Manager', 'Staff')) NOT NULL,
    CreatedAt DATETIME DEFAULT GETDATE()
);
GO

INSERT INTO Users (UserName, Email, PasswordHash, Role) VALUES
('김철수', 'admin@erp.com', 'hashedpassword123', 'Admin'),
('이영희', 'manager@erp.com', 'hashedpassword456', 'Manager'),
('박민수', 'staff1@erp.com', 'hashedpassword789', 'Staff'),
('최지훈', 'staff2@erp.com', 'hashedpassword101', 'Staff'),
('한수연', 'staff3@erp.com', 'hashedpassword102', 'Staff');
GO

CREATE TABLE Products (
    ProductId INT IDENTITY(1,1) PRIMARY KEY,
    ProductName NVARCHAR(200) NOT NULL,
    Price DECIMAL(10,2) CHECK (Price > 0) NOT NULL,
    StockQuantity INT CHECK (StockQuantity >= 0) NOT NULL,
    CreatedAt DATETIME DEFAULT GETDATE()
);
GO

INSERT INTO Products (ProductName, Price, StockQuantity) VALUES 
('노트북', 1500000, 10),
('무선 마우스', 25000, 50),
('기계식 키보드', 55000, 30),
('27인치 모니터', 300000, 15),
('레이저 프린터', 200000, 20);
GO

CREATE TABLE Orders (
    OrderId INT IDENTITY(1,1) PRIMARY KEY,
    UserId INT NOT NULL,
    OrderStatus NVARCHAR(50) CHECK (OrderStatus IN ('Pending', 'Shipped', 'Completed', 'Cancelled')) NOT NULL,
    OrderDate DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (UserId) REFERENCES Users(UserId) ON DELETE CASCADE
);
GO

INSERT INTO Orders (UserId, OrderStatus) VALUES 
(1, 'Pending'),
(2, 'Shipped'),
(3, 'Completed'),
(4, 'Pending'),
(5, 'Cancelled');
GO

-- OrderDetails 테이블 생성
CREATE TABLE OrderDetails (
    OrderDetailId INT IDENTITY(1,1) PRIMARY KEY,
    OrderId INT NOT NULL,
    ProductId INT NOT NULL,
    Quantity INT CHECK (Quantity > 0) NOT NULL,
    TotalPrice DECIMAL(10, 2) NULL, -- 총 가격을 저장할 컬럼 (NULL 허용)
    FOREIGN KEY (OrderId) REFERENCES Orders(OrderId) ON DELETE CASCADE,
    FOREIGN KEY (ProductId) REFERENCES Products(ProductId)
);
GO

-- 트리거 생성: 새로 삽입된 OrderDetails에 대해 총 가격 계산
CREATE TRIGGER trg_CalculateTotalPrice
ON OrderDetails
AFTER INSERT
AS
BEGIN
    UPDATE od
    SET od.TotalPrice = i.Quantity * p.Price
    FROM OrderDetails od
    INNER JOIN inserted i ON od.OrderDetailId = i.OrderDetailId
    INNER JOIN Products p ON i.ProductId = p.ProductId;
END;
GO

-- OrderDetails 데이터 삽입
INSERT INTO OrderDetails (OrderId, ProductId, Quantity)
VALUES
(1, 1, 1),  -- 노트북 1개
(1, 2, 2),  -- 무선 마우스 2개
(2, 3, 1),  -- 기계식 키보드 1개
(3, 4, 2),  -- 27인치 모니터 2개
(4, 5, 1);  -- 레이저 프린터 1개
GO

CREATE TABLE Inventory (
    InventoryId INT IDENTITY(1,1) PRIMARY KEY,
    ProductId INT NOT NULL,
    ChangeType NVARCHAR(50) CHECK (ChangeType IN ('IN', 'OUT')) NOT NULL,
    QuantityChange INT NOT NULL,
    ChangeDate DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (ProductId) REFERENCES Products(ProductId)
);
GO

INSERT INTO Inventory (ProductId, ChangeType, QuantityChange) VALUES 
(1, 'IN', 10),  -- 노트북 10개 입고
(2, 'IN', 50),  -- 무선 마우스 50개 입고
(3, 'OUT', 5),  -- 기계식 키보드 5개 출고
(4, 'OUT', 2),  -- 27인치 모니터 2개 출고
(5, 'IN', 10);  -- 레이저 프린터 10개 입고
GO

CREATE INDEX IDX_Users_Email ON Users(Email);
CREATE INDEX IDX_Orders_UserId ON Orders(UserId);
CREATE INDEX IDX_OrderDetails_ProductId ON OrderDetails(ProductId);
CREATE INDEX IDX_Inventory_ProductId ON Inventory(ProductId);
GO

2. 프로젝트 구현
1) Visual Studio 2022 필수 설치
ASP.NET 및 웹 개발
.NET 데스크톱 개발
Azure 개발 (클라우드 배포 시 필요)

2) IIS, localhost로 인증서버 만들기
2-1) 프로젝트 생성
ASP.NET Core Web API > AuthServer 생성

2-2) 패키지 설치
2-2-1) JWT(Json Web Token) 인증을 위한 라이브러리
JWT 토큰 검증/Bearer 인증 처리/사용자 권한 관리
도구 > NuGet 패키지 관리자 > 솔루션용 NuGet 패키지 관리 > 찾아보기 > JwtBearer > 프로젝트 > AuthServer > 
버전 > 8.0.0 > 설치
dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer 

2-3) https://localhost:7190/swagger/index.html
2-3-1) 설계
AuthServer                     
   ├── appsettings.json            
   ├── AuthServer.http
   └── Program.cs
2-3-2) 실행
POST : /api/Auth/login > Try it out > username, password 입력 > Execute
Code	Details 200	
Response body
Download
{
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1lIjoidGVzdHVzZXIiLCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3dzLzIwMDgvMDYvaWRlbnRpdHkvY2xhaW1zL3JvbGUiOiJBZG1pbiIsImV4cCI6MTc0MDcyODg0NCwiaXNzIjoibG9jYWxob3N0IiwiYXVkIjoibG9jYWxob3N0In0.e0hmiWmDj32xpHRHvDsLE_PE5kiCIsUHTq-6VqaK8n4"
}
Response headers
 content-type: application/json; charset=utf-8 
 date: Thu,27 Feb 2025 07:47:24 GMT 
 server: Kestrel 

3) 솔루션만들기
빈솔루션 > ERPSystem

3-1) 프로젝트만들기
3-1-1) 백엔드 프로젝트 생성
"ASP.NET Core Web API" > ERPSystem.API
ERPSystem.API                     // API 요청을 처리하는 프로젝트
   ├── Controllers                // API 컨트롤러들
   │   ├── ProductsController.cs
   │   ├── OrdersController.cs
   │   └── InventoryController.cs
   ├── Middleware                 // 예외 처리 미들웨어
   │   └── ValidationExceptionMiddleware.cs
   ├── Configuration              // 설정 관련 클래스들
   │   └── AppSettings.cs
   ├── Extensions                 // 서비스 확장 메서드
   │   └── ServiceExtensions.cs
   ├── Profiles                 // OrdersDto와 CreateOrderCommand, UpdateOrderCommand 간의 매핑을 자동화하기 위해 AutoMapper 프로파일을 설정
   │   └── OrdersProfile.cs
   ├── Startup.cs                 // 앱 초기 설정 및 서비스 등록
   └── Program.cs                 // 프로그램 진입점

3-1-2) 프로젝트 간 참조(의존성 설정)
프로젝트 우클릭 > 추가 > 참조 > 프로젝트
3-1-2-1) ERPSystem.Infrastructure

3-1-3) 패키지 설치(ERPSystem.API) : 유지보수성, 보안성, 확장성, 효율성을 높이기 위함
3-1-3-1) JWT(Json Web Token) 인증을 위한 라이브러리
JWT 토큰 검증/Bearer 인증 처리/사용자 권한 관리
도구 > NuGet 패키지 관리자 > 솔루션용 NuGet 패키지 관리 > 찾아보기 > JwtBearer > 프로젝트 > ERPSystem.API > 
버전 > 8.0.0 > 설치
dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer 
3-1-3-2) Swagger UI + OpenAPI 문서 자동 생성 라이브러리 7.3.0
- API 문서를 자동으로 생성하고 UI에서 테스트 가능하게 함
- ASP.NET Core Web API 프로젝트에서 필수적으로 사용됨
- Swagger UI를 통해 API 요청을 쉽게 테스트 가능
dotnet add package Swashbuckle.AspNetCore
3-1-3-3) CQRS 패턴을 위한 라이브러리 12.4.1
- Handler-Request 패턴을 쉽게 구현 가능
- 비즈니스 로직을 Controller에서 분리하는 데 도움을 줌
- Command, Query, Event 기반의 요청 처리
- 중재자 역할을 하는 Mediator 사용
- Handler를 분리하여 유지보수성 증가
dotnet add package MediatR
3-1-3-4) ASP.NET Core에서 유효성 검사를 쉽게 구현하는 라이브러리 11.3.0
- 기존 DataAnnotations보다 강력한 검증 기능 제공
- IValidator<T> 인터페이스를 통해 검증 규칙을 쉽게 정의 가능
dotnet add package FluentValidation.AspNetCore
3-1-3-5) SQL Server 데이터베이스와 연결하는 Entity Framework Core 패키지 9.0.2
- .UseSqlServer(connectionString)을 사용하여 DB 연결 가능
- Code-First 방식의 데이터베이스 모델링
- LINQ를 사용한 데이터베이스 쿼리
- 마이그레이션(Migration) 지원
dotnet add package Microsoft.EntityFrameworkCore.SqlServer
3-1-3-6) EF Core 마이그레이션을 위한 패키지 9.0.2
- dotnet ef migrations add InitialCreate 등의 명령어를 사용할 때 필요
- dotnet ef migrations 및 dotnet ef database update 명령어 사용 가능
- 설치하지 않으면 마이그레이션 명령어 실행 시 에러 발생
dotnet add package Microsoft.EntityFrameworkCore.Design
3-1-3-7) 매핑을 자동화
AutoMapper.Extensions.Microsoft.DependencyInjection 12.0.1
3-1-3-8) JSON 형태의 구조적 로깅을 지원 및 다양한 로깅 대상(Sinks)에 데이터를 기록
Serilog 4.2.0
3-1-3-9) Serilog을 .NET의 표준 로깅 시스템(ILogger)과 통합하는 확장 패키지
Serilog.Extensions.Logging 9.0.0
3-1-3-10) Swagger 문서에서 어노테이션(Annotations)을 지원하는 확장 패키지
Swashbuckle.AspNetCore.Annotations 7.3.1

3-1-2) 도메인 모델, 엔티티, 인터페이스 프로젝트 생성
Class Library > ERPSystem.Domain

3-1-2-1) 설계
CQRS + MediatR, FluentValidation, AutoMapper, Unit of Work, Redis Caching 

ERPSystem.Domain
├── Entities
│   ├── Users.cs          → users 테이블
│   ├── Products.cs       → products 테이블
│   ├── Orders.cs         → orders 테이블
│   ├── OrderDetails.cs   → order_details 테이블
│   └── Inventory.cs    → inventories 테이블
├── Interfaces
│   ├── IUsersRepository.cs         → IUsersRepository 인터페이스
│   ├── IProductsRepository.cs      → IProductsRepository 인터페이스
│   ├── IOrdersRepository.cs        → IOrdersRepository 인터페이스
│   ├── IOrderDetailsRepository.cs  → IOrderDetailsRepository 인터페이스
│   └── IInventoryRepository.cs   → IInventoriesRepository 인터페이스
└── Enums
    └── OrderStatus.cs    → 주문 상태(Enum)

3-1-3) 비즈니스 로직, CQRS 패턴 적용
Class Library > ERPSystem.Application

3-1-3-1) 설계
ERPSystem.Application
├── Common
│   ├── Behaviors
│   │   ├── LoggingBehavior.cs : 요청이 처리되기 전에 로그를 남기고, 요청이 끝난 후 응답을 로그로 기록
│   │   ├── ValidationBehavior.cs : 유효성 검사 로직을 구현하는 클래스
│   │   └── PerformanceBehavior.cs : 성능 관련 정보를 로깅하는 클래스
│   ├── Exceptions
│   │   ├── ValidationException.cs : 유효성 검사 오류를 캡슐화하여, 오류가 발생한 필드와 해당 오류 메시지를 관리
│   │   ├── NotFoundException.cs : 데이터가 없을 때 발생하는 예외 처리
│   │   └── CustomException.cs : 커스텀 예외를 처리하는 클래스
│   ├── Mappings
│   │   ├── OrderProfile.cs : `Order` 엔티티와 `OrderDto` 간의 변환을 처리하는 AutoMapper 프로필
│   │   ├── ProductProfile.cs : `Product` 엔티티와 `ProductDto` 간의 변환을 처리하는 AutoMapper 프로필
│   │   └── UserProfile.cs : `User` 엔티티와 `UserDto` 간의 변환을 처리하는 AutoMapper 프로필
│   └── Validators
│       ├── CreateOrderValidator.cs : `Order` 생성 유효성 검사를 담당
│       ├── CreateProductValidator.cs : `Product` 생성 유효성 검사를 담당
│       └── CreateUserValidator.cs : `User` 생성 유효성 검사를 담당
├── DTOs
│   ├── OrdersDto.cs : 주문 정보를 전송하는 데이터 전송 객체
│   ├── ProductsDto.cs : 제품 정보를 전송하는 데이터 전송 객체
|   ├── InventoryDto.cs
│   └── UsersDto.cs : 사용자 정보를 전송하는 데이터 전송 객체
├── Features
│   ├── Orders
│   │   ├── Commands
│   │   │   ├── CreateOrderCommand.cs : 주문 생성 명령 처리
│   │   │   ├── UpdateOrderCommand.cs : 주문 업데이트 명령 처리
│   │   │   ├── DeleteOrderCommand.cs : 주문 삭제 명령 처리
│   │   ├── Queries
│   │   │   ├── GetOrderByIdQuery.cs : ID로 주문을 조회하는 쿼리
│   │   │   ├── GetAllOrdersQuery.cs : 모든 주문을 조회하는 쿼리
│   ├── Products
│   │   ├── Commands
│   │   │   ├── CreateProductCommand.cs : 제품 생성 명령 처리
│   │   │   ├── UpdateProductCommand.cs : 제품 업데이트 명령 처리
│   │   │   ├── DeleteProductCommand.cs : 제품 삭제 명령 처리
│   │   ├── Queries
│   │   │   ├── GetProductByIdQuery.cs : ID로 제품을 조회하는 쿼리
│   │   │   ├── GetAllProductsQuery.cs : 모든 제품을 조회하는 쿼리
│   ├── Users
│   │   ├── Commands
│   │   │   ├── CreateUserCommand.cs : 사용자 생성 명령 처리
│   │   │   ├── UpdateUserCommand.cs : 사용자 업데이트 명령 처리
│   │   │   ├── DeleteUserCommand.cs : 사용자 삭제 명령 처리
│   │   ├── Queries
│   │   │   ├── GetUserByIdQuery.cs : ID로 사용자 정보를 조회하는 쿼리
│   │   │   ├── GetAllUsersQuery.cs : 모든 사용자 정보를 조회하는 쿼리
└── Interfaces
    ├── IUnitOfWork.cs : 트랜잭션 처리를 위한 유닛 오브 워크 인터페이스
    ├── IOrdersRepository.cs : `Order` 엔티티에 대한 데이터 액세스를 담당하는 인터페이스
    ├── IProductsRepository.cs : `Product` 엔티티에 대한 데이터 액세스를 담당하는 인터페이스
    ├── IUsersRepository.cs : `User` 엔티티에 대한 데이터 액세스를 담당하는 인터페이스
    ├── IOrdersService.cs                // `Order` 관련 비즈니스 로직을 처리하는 서비스 인터페이스
    ├── IProductsService.cs              // `Product` 관련 비즈니스 로직을 처리하는 서비스 인터페이스
    ├── IUsersService.cs                 // `User` 관련 비즈니스 로직을 처리하는 서비스 인터페이스
    ├── IOrdersCommandHandler.cs         // `Order` 명령 처리 핸들러 인터페이스
    ├── IProductsCommandHandler.cs       // `Product` 명령 처리 핸들러 인터페이스
    ├── IUsersCommandHandler.cs          // `User` 명령 처리 핸들러 인터페이스
    ├── IOrdersQueryHandler.cs           // `Order` 쿼리 처리 핸들러 인터페이스
    ├── IProductsQueryHandler.cs         // `Product` 쿼리 처리 핸들러 인터페이스
    ├── IUsersQueryHandler.cs            // `User` 쿼리 처리 핸들러 인터페이스
    ├── IInventoryService.cs             // `Inventory` 관련 비즈니스 로직을 처리하는 서비스 인터페이스
    ├── IInventoryRepository.cs          // `Inventory` 엔티티에 대한 데이터 액세스를 담당하는 인터페이스
    ├── IInventoryCommandHandler.cs      // `Inventory` 명령 처리 핸들러 인터페이스
    └── IInventoryQueryHandler.cs        // `Inventory` 쿼리 처리 핸들러 인터페이스

3-1-3-2) 패키지 설치
3-1-3-2-1) 객체 유효성 검사 라이브러리
FluentValidation 11.11.0
3-1-3-2-2) 로깅 기능 표준 라이브러리
Microsoft.Extensions.Logging 9.0.2
3-1-3-2-3) 중재자 패턴(Mediator Pattern) 구현 라이브러리
애플리케이션의 구성 요소들 간의 의존성을 줄이고, 명확한 방법으로 서로 통신할 수 있게 해 줌 
MediatR 12.4.1
3-1-3-2-4) 객체 간의 매핑을 자동으로 처리해주는 라이브러리
DTO(Data Transfer Object)와 Entity 간의 변환을 자동화하여 코드 중복을 줄이고, 객체 변환 로직을 간결하게 만들어 줌 
AutoMapper 10.1.1
3-1-3-2-5) Microsoft의 DI 컨테이너
Microsoft.Extentions.DependencyInjection 9.0.2
3-1-3-2-6) 데이터베이스와 상호작용할 수 있도록 해주는 Object-Relational Mapping (ORM) 프레임워크
Microsoft.EntityFrameworkCore 3.1.32

3-1-3-3) 프로젝트 참조
ERPSystem.Domain

3-1-4) 인프라 프로젝트 생성
Class Library > ERPSystem.Infrastructure
ERPSystem.Infrastructure
└── Data
|   └── ApplicationDbContext.cs
└── Interfaces
    └── IApplicationDbContext.cs
3-1-4-1) 참조
ERPSystem.Domain

3-1-4-2) 패키지 설치
3-1-4-2-1)EntityFrameworkCore 3.1.32
3-1-4-2-2)Microsoft.EntityFrameworkCore.Relational 3.1.32

3-1-5) 프론트엔트
3-1-5-1) 설계
ERPSystem.Frontend
├── public
├── src
│   ├── components  // React 컴포넌트
│   │   ├── Users
│   │   │   ├── UserList.js        → 사용자 목록
│   │   │   └── UserForm.js        → 사용자 생성/수정 폼
│   │   ├── Products
│   │   │   ├── ProductList.js
│   │   │   └── ProductForm.js
│   │   ├── Orders
│   │   │   ├── OrderList.js
│   │   │   └── OrderForm.js
│   ├── services
│   │   └── apiService.js         → API 호출 서비스
│   ├── App.js                    → 메인 앱 파일
│   └── index.js                  → React 앱 진입점
└── package.json

3-1-5-2) Node.js 설치
https://nodejs.org/ko Node.js node-v22.14.0-x64.msi 다운로드
C:\Program Files\nodejs 설치

3-1-5-3) 프로젝트 생성
빈 프로젝트(C#) > ERPSystem.Frontend

3-1-5-4) React 프로젝트 생성

- Node.js 설치 확인
솔루션 탐색기 > ERPSystem.Frontend 우클릭 > 터미널(PowerShell)에서 열기
PS C:\ASP.NETproject\ERPSystem\ERPSystem.Frontend> node -v
>> npm -v
v22.14.0
10.9.2

- React 프로젝트 생성
PS C:\ASP.NETproject\ERPSystem\ERPSystem.Frontend> 
npx create-react-app my-app --template cra-template
Move-Item -Path my-app\* -Destination ERPSystem.Frontend -Force
Get-ChildItem -Path my-app -Force | Move-Item -Destination ERPSystem.Frontend -Force
Remove-Item -Path my-app -Recurse -Force (my-app 폴더 삭제)
cd ERPSystem.Frontend
npm install 
npm start 
=====================================================================================
Compiled successfully!

You can now view my-app in the browser.

  Local:            http://localhost:3000
  On Your Network:  http://192.168.0.3:3000

Note that the development build is not optimized.
To create a production build, use npm run build.

webpack compiled successfully
====================================================================================





