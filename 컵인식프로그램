프로그램명 : 간단한 이미지 프로세싱 및 컵인식 프로그램
1.개발도구 : 
1) WPF
Microsoft Visual Studio Enterprise 2022 (64-bit) - Current
버전 17.12.4
Microsoft .NET Framework 버전 4.8.09032
C# 도구   4.12.0-3.24631.1+da7c6c4257b2f661024b9a506773372a09023eee

2) Python 3.9.5

3) YOLOv5
ultralytics             8.3.70
ultralytics-thop        2.0.14

2. 개발환경 : 
64비트 운영 체제 
x64 기반 프로세서
Windows 11 Pro
13th Gen Intel(R) Core(TM) i7-13620H   2.40 GHz
Intel(R) UHD Graphics
NVIDIA GeForce RTX 4060 Laptop GPU

3. 프로그램
1) WPF
- MainWindow.xaml
<Window x:Class="WpfApp2.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfApp2.ViewModels"
        xmlns:conv="clr-namespace:WpfApp2.Converters"
        mc:Ignorable="d"
        Title="이미지 편집기" Height="600" Width="800">
    
    <!-- 리소스 등록 (BoolToVisibilityConverter) -->
    <Window.Resources>
        <conv:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>

        <!-- 버튼 스타일 정의 -->
        <Style x:Key="ToolbarButtonStyle" TargetType="Button">
            <Setter Property="Width" Value="100"/>
            <Setter Property="Margin" Value="5"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Top"/>
            <Setter Property="Background" Value="LightSteelBlue"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="BorderBrush" Value="DarkSlateGray"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Padding" Value="10,5"/>
            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect Color="Gray" Direction="315" ShadowDepth="2" BlurRadius="4"/>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- 무지개색 애니메이션 (더 빠르게 여러 색상으로 변하게) -->
        <Storyboard x:Key="RainbowAnimation" RepeatBehavior="Forever">
            <ColorAnimation
                Storyboard.TargetName="SpinnerStrokeBrush"
                Storyboard.TargetProperty="Color"
                From="Red"
                To="Blue"
                Duration="0:0:0.5"   
                AutoReverse="True"
                RepeatBehavior="Forever"/>
        </Storyboard>

        <!-- 공이 위아래로 더 빠르고 더 높게 튕기는 애니메이션 -->
        <Storyboard x:Key="BounceAnimation" RepeatBehavior="Forever">
            <DoubleAnimation
                Storyboard.TargetName="SpinnerTranslateTransform"
                Storyboard.TargetProperty="Y"
                From="0" To="-150"    
                Duration="0:0:0.10"                
                AutoReverse="True"/>
        </Storyboard>

    </Window.Resources>
    
    <Window.DataContext>
        <local:MainViewModel/>
    </Window.DataContext>
    
    <Grid>
        
        <!-- 행 정의 -->
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        
        <!-- 툴바 -->
        <ToolBar Grid.Row="0" VerticalAlignment="Top" Height="26.96">
            <Button Content="열기" HorizontalAlignment="Left" VerticalAlignment="Top" Click="OpenImage_Click"/>
            <Button x:Name="GrayScaleButton" Content="그레이스케일" HorizontalAlignment="Left" VerticalAlignment="Top" Click="GrayScale_Click"/>
            <Button x:Name="CannyEdgeButton" Content="캐니엣지" HorizontalAlignment="Left" VerticalAlignment="Top" Click="CannyEdge_Click"/>
            <Button x:Name="YoloV5Button" Content="욜로v5" HorizontalAlignment="Left" VerticalAlignment="Top" Click="YoloV5_Click"/>
            <Button x:Name="ClearButton" Content="욜로검출결과삭제" HorizontalAlignment="Left" VerticalAlignment="Top" Click="Clear_Click"/>
        </ToolBar>
        
        <!-- 콘텐츠 영역 -->
        <Grid Grid.Row="1" Background="LightGray">

            <!-- 이미지 영역 -->
            <Image x:Name="ImageView" VerticalAlignment="Top"/>

            <!-- 처리중 표시 -->
            <Grid x:Name="LoadingPanel" HorizontalAlignment="Center" VerticalAlignment="Center" Background="LightGray" Opacity="0.8"
                Visibility="{Binding IsLoading, Converter={StaticResource BoolToVisibilityConverter}}" Width="200" Height="200">
                <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Orientation="Vertical">
                    <!-- 회전하는 원 -->
                    <Ellipse x:Name="Spinner" Width="30" Height="30" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Ellipse.RenderTransform>
                            <RotateTransform x:Name="SpinnerRotation" CenterX="0.5" CenterY="0.5"/>
                        </Ellipse.RenderTransform>
                        <Ellipse.Stroke>
                            <SolidColorBrush x:Name="SpinnerStrokeBrush" Color="Red"/>
                        </Ellipse.Stroke>
                        <Ellipse.StrokeThickness>10</Ellipse.StrokeThickness>
                    </Ellipse>
                    <!-- 처리중 텍스트 -->
                    <TextBlock Text="처리 중..." HorizontalAlignment="Center" Margin="10,10,10,0" FontSize="14" FontWeight="Bold"/>
                </StackPanel>
            </Grid>


        </Grid>
        
        <!-- 상태표시줄 -->
        <StatusBar x:Name="StatusDisplay" Grid.Row="2" Height="26.96">
            <TextBlock x:Name="FilePathTextBlock" TextWrapping="Wrap" Text="파일경로." HorizontalAlignment="Center"/>
            <StatusBarItem HorizontalAlignment="Right">
                <TextBlock x:Name="ProcessTimeTextBlock" TextWrapping="Wrap" Text="처리속도" HorizontalAlignment="Right"/>
            </StatusBarItem>            
        </StatusBar>
        
    </Grid>    
    
</Window>

- MainWindow.xaml.cs
using System.Diagnostics;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

using WpfApp2.ViewModels; // ViewModel 네임스페이스 추가
using WpfApp2.Converters;
using System.ComponentModel;
using System.Diagnostics.Eventing.Reader; // Converter 네임스페이스 추가
using System.Windows.Media.Animation;
using System;

using WpfApp2.ImageProcessing;
using WpfApp2.Util;

namespace WpfApp2
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainViewModel ViewModel { get; set; }

        private GrayscaleProcessor grayscaleProcessor;
        private CannyEdgeProcessor cannyEdgeProcessor;

        public MainWindow()
        {
            InitializeComponent();

            grayscaleProcessor = new GrayscaleProcessor();
            cannyEdgeProcessor = new CannyEdgeProcessor();

            // ViewModel
            ViewModel = new MainViewModel();
            DataContext = ViewModel; // ViewModel을 DataContext에 연결

            // 로딩 패널 애니메이션 설정
            ViewModel.PropertyChanged += ViewModel_PropertyChanged;

            // 로딩 패널을 숨김
            ViewModel.IsLoading = false;


            // 그레이스케일 버튼 비활성화
            //GrayScaleButton.IsEnabled = false;
            // 캐니엣지 버튼 비활성화
            //CannyEdgeButton.IsEnabled = false;
            // 욜로v5 버튼 비활성화
            //YoloV5Button.IsEnabled = false;
        }

        private void ViewModel_PropertyChanged(object sender, PropertyChangedEventArgs e)
        {
            // IsLoading 속성이 변경되면 애니메이션 제어
            var viewModel = (MainViewModel)sender;
            var RainbowAnimation = (Storyboard)this.Resources["RainbowAnimation"];

            if(e.PropertyName == nameof(MainViewModel.IsLoading))
            {
                if (viewModel.IsLoading)
                {
                    //MessageBox.Show("IsLoading이 true로 변경되었습니다.");
                    RainbowAnimation.Begin();
                }
                else
                {
                    //MessageBox.Show("IsLoading이 false로 변경되었습니다.");
                    RainbowAnimation.Stop();
                }
            }
        }

        private void OpenImage_Click(object sender, RoutedEventArgs e)
        {
            var openFileDialog = new Microsoft.Win32.OpenFileDialog
            {
                Filter = "Image Files|*.jpg;*.jpeg;*.png;*.bmp",
                Title = "이미지 파일 선택"
            };

            if(openFileDialog.ShowDialog() == true )
            {
                try
                {
                    var bitmapImage = new BitmapImage();
                    bitmapImage.BeginInit();
                    bitmapImage.CacheOption = BitmapCacheOption.OnLoad; // 메모리에 완전히 로드
                    bitmapImage.UriSource = new Uri(openFileDialog.FileName);
                    bitmapImage.EndInit();
                    bitmapImage.Freeze(); // 스레드 안전성을 위해 고정
                    ImageView.Source = bitmapImage;

                    // 그레이스케일 버튼 활성화
                    //GrayScaleButton.IsEnabled = true;

                    // 상태표시줄에 파일경로 출력
                    FilePathTextBlock.Text = openFileDialog.FileName;
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"이미지를 로드하는 중 오류가 발생했습니다: {ex.Message}",
                        "오류", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private async void GrayScale_Click(object sender, RoutedEventArgs e)
        {
            if (ImageView.Source is BitmapImage bitmapImage)
            {
                try
                {
                    // 처리중 보이기
                    ViewModel.IsLoading = true;

                    WriteableBitmap writeableBitmap = null;
                    int width = 0, height = 0;

                    // UI 스레드에서 WriteableBitmap 생성 및 크기 가져오기
                    Application.Current.Dispatcher.Invoke(() =>
                    {
                        writeableBitmap = new WriteableBitmap(bitmapImage);
                        width = writeableBitmap.PixelWidth;
                        height = writeableBitmap.PixelHeight;
                    });

                    if (writeableBitmap == null || width == 0 || height == 0)
                        throw new InvalidOperationException("WriteableBitmap이 유효하지 않습니다.");

                    // 비동기적으로 그레이스케일 변환
                    WriteableBitmap processBitmap = await grayscaleProcessor.ConvertToGrayScaleAsync(bitmapImage, ProcessTimeTextBlock);

                    // UI 스레드에서 WriteableBitmap 업데이트
                    Application.Current.Dispatcher.Invoke(() =>
                    {
                        processBitmap.Freeze();
                        ImageView.Source = processBitmap;
                    });
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"이미지를 그레이스케일로 변환하는 중 오류가 발생했습니다: {ex.Message}",
                        "오류", MessageBoxButton.OK, MessageBoxImage.Error);
                }
                finally
                {
                    // 처리중 숨기기
                    ViewModel.IsLoading = false;

                    // 그레이스케일 버튼 비활성화
                    //GrayScaleButton.IsEnabled = false;
                    // 캐니엣지 버튼 활성화
                    //CannyEdgeButton.IsEnabled = true;
                }
            }
            else
            {
                MessageBox.Show("이미지가 로드되지 않았습니다.", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private async void CannyEdge_Click(object sender, RoutedEventArgs e)
        {
            if (ImageView.Source is WriteableBitmap writeableBitmap)
            {
                try
                {
                    // 처리중 보이기
                    ViewModel.IsLoading = true;

                    WriteableBitmap writeableBitmap1 = null;
                    int width = 0, height = 0;

                    // UI 스레드에서 WriteableBitmap 생성 및 크기 가져오기
                    Application.Current.Dispatcher.Invoke(() =>
                    {
                        writeableBitmap1= new WriteableBitmap(writeableBitmap);
                        width = writeableBitmap.PixelWidth;
                        height = writeableBitmap.PixelHeight;
                    });


                    if (writeableBitmap1 == null || width == 0 || height == 0)
                        throw new InvalidOperationException("WriteableBitmap이 유효하지 않습니다.");

                    // 비동기적으로 캐이엣지 적용
                    WriteableBitmap resultBitmap = await cannyEdgeProcessor.ApplyCannyEdgeDetectionAsync(writeableBitmap1, ProcessTimeTextBlock);

                    // UI 스레드에서 WriteableBitmap 업데이트
                    Application.Current.Dispatcher.Invoke(() =>
                    {
                        resultBitmap.Freeze();
                        ImageView.Source = resultBitmap;
                    });
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"캐니 엣지 검출 중 오류가 발생했습니다: {ex.Message}",
                        "오류", MessageBoxButton.OK, MessageBoxImage.Error);
                }
                finally
                {
                    // 처리중 숨기기
                    ViewModel.IsLoading = false;

                    // 그레이스케일 버튼 비활성화
                    //GrayScaleButton.IsEnabled = false;
                    // 캐니엣지 버튼 비활성화
                    //CannyEdgeButton.IsEnabled = false;
                    // 욜로v5 버튼 활성화
                    //YoloV5Button.IsEnabled = true;
                }
            }
            else
            {
                MessageBox.Show("그레이스케일 이미지가 필요합니다.", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private async void YoloV5_Click(object sender, RoutedEventArgs e)
        {
            if (ImageView.Source is BitmapImage bitmapImage)
            {
                try
                {
                    // 처리중 보이기
                    ViewModel.IsLoading = true;

                    WriteableBitmap writeableBitmap = null;
                    int width = 0, height = 0;

                    // UI 스레드에서 WriteableBitmap 생성 및 크기 가져오기
                    Application.Current.Dispatcher.Invoke(() =>
                    {
                        writeableBitmap = new WriteableBitmap(bitmapImage);
                        width = writeableBitmap.PixelWidth;
                        height = writeableBitmap.PixelHeight;
                    });

                    if (writeableBitmap == null || width == 0 || height == 0)
                        throw new InvalidOperationException("WriteableBitmap이 유효하지 않습니다.");

                    // 시작 시간 기록
                    var startTime = DateTime.Now;

                    await Task.Run(() => ProcessYoloV5Async(writeableBitmap, width, height, startTime));
                    
                    // UI 스레드에서 WriteableBitmap 업데이트
                    Application.Current.Dispatcher.Invoke(() =>
                    {
                        writeableBitmap.Freeze();
                        ImageView.Source = writeableBitmap;
                    });
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"욜로v5검출 중 오류가 발생했습니다: {ex.Message}",
                        "오류", MessageBoxButton.OK, MessageBoxImage.Error);
                }
                finally
                {
                    // 처리중 숨기기
                    ViewModel.IsLoading = false;

                    // 그레이스케일 버튼 비활성화
                    //GrayScaleButton.IsEnabled = false;
                    // 캐니엣지 버튼 비활성화
                    //CannyEdgeButton.IsEnabled = false;
                    // 욜로v5 버튼 활성화
                    //YoloV5Button.IsEnabled = false;
                }
            }
            else
            {
                MessageBox.Show("이미지가 필요합니다.", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void ProcessYoloV5Async(WriteableBitmap writeableBitmap, int width, int height, DateTime startTime)
        {
            var pythonScriptPath = @"C:\yolov5result\yolov5_inference.py";
            var inputImagePath = "yolov5_input_image.png";
            var outputImagePath = "yolov5_output_image.png";

            var pixelData = new byte[width * height * 4];

            // UI 스레드에서 픽셀 데이터를 복사
            Application.Current.Dispatcher.Invoke(() =>
            {
                writeableBitmap.CopyPixels(pixelData, width * 4, 0);
            });

            // 픽셀데이터를 이미지로 저장
            WpfApp2.Util.FileUtils.SaveBitmapToPng(writeableBitmap, inputImagePath);

            // Yolov5 검출 로직
            var processStartInfo = new ProcessStartInfo
            {
                FileName = "python",
                Arguments = $"\"{pythonScriptPath}\" --source \"{inputImagePath}\" --output \"{outputImagePath}\"",  // --source와 --output 옵션을 포함
                CreateNoWindow = true,
                UseShellExecute = false
            };

            using (var process = Process.Start(processStartInfo))
            {
                process.WaitForExit(); // Python 스크립트 실행이 완료될 때까지 대기
            }

            // 'runs/detect' 폴더는 실행 폴더 내에 생성됩니다
            string detectDir = System.IO.Path.Combine(Directory.GetCurrentDirectory(), "runs", "detect");

            // 최신 expX 폴더 찾기 (expX 폴더 이름이 가장 큰 폴더 찾기)
            var expFolders = Directory.GetDirectories(detectDir)
                                       .OrderByDescending(d => new DirectoryInfo(d).Name)
                                       .ToList();
            byte[] outputPixelData = null;

            try
            {
                if (expFolders.Any())
                {
                    string latestFolder = expFolders.First(); // 최신 폴더

                    // 최신 폴더에서 yolov5_input_image.jpg 파일 찾기
                    string resultImageFile = System.IO.Path.Combine(latestFolder, "yolov5_input_image.jpg");

                    if (File.Exists(resultImageFile))
                    {
                        // 결과 이미지 로드
                        outputPixelData = WpfApp2.Util.FileUtils.LoadPngToPixels(resultImageFile, out width, out height);
                    }
                    else
                    {
                        throw new FileNotFoundException("결과 이미지 파일이 존재하지 않습니다.", resultImageFile);
                    }
                }
                else
                {
                    throw new DirectoryNotFoundException("YoloV5 결과 폴더가 존재하지 않습니다.");
                }

                // 최종 처리 시간 계산
                var totalElapsedTime = DateTime.Now - startTime;

                // UI 스레드에서 픽셀 데이터를 다시 씀
                Application.Current.Dispatcher.Invoke(() =>
                {
                    if (outputPixelData != null)
                    {
                        writeableBitmap.Lock();
                        writeableBitmap.WritePixels(new Int32Rect(0, 0, width, height), outputPixelData, width * 4, 0);
                        writeableBitmap.Unlock();

                        ProcessTimeTextBlock.Text = $"욜로v5 객체 감지 처리 시간: {totalElapsedTime.TotalSeconds:F2}초";
                    }
                    else
                    {
                        ProcessTimeTextBlock.Text = "이미지 파일을 로드할 수 없습니다.";
                    }
                });
            }
            catch (DirectoryNotFoundException dirEx)
            {
                // 디렉토리가 없을 경우
                Application.Current.Dispatcher.Invoke(() =>
                {
                    ProcessTimeTextBlock.Text = $"에러: {dirEx.Message}";
                });
            }
            catch (FileNotFoundException fileEx)
            {
                // 파일이 없을 경우
                Application.Current.Dispatcher.Invoke(() =>
                {
                    ProcessTimeTextBlock.Text = $"에러: {fileEx.Message}";
                });
            }
            catch (Exception ex)
            {
                // 기타 예외 처리
                Application.Current.Dispatcher.Invoke(() =>
                {
                    ProcessTimeTextBlock.Text = $"예상치 못한 오류가 발생했습니다: {ex.Message}";
                });
            }
        }

        private async void Clear_Click(object sender, RoutedEventArgs e)
        {
            string rootPath = System.IO.Path.Combine(Environment.CurrentDirectory, "runs"); // 실팽폴더 내의 rus 폴더 경로

            // 폴더가 존재하는지 확인
            if (Directory.Exists(rootPath))
            {
                try
                {
                    
                    // 하위 파일과 폴더를 재귀적으로 삭제하는 함수 호출
                    await WpfApp2.Util.FileUtils.DeleteDirectoryAsync(rootPath);

                    // 삭제가 완료되면 메시지 박스 또는 다른 방법으로 알림
                    MessageBox.Show("모두 삭제했습니다.");
                }
                catch (Exception ex)
                {
                    // 오류 발생 시 오류 메시지 표시
                    MessageBox.Show($"오류가 발생했습니다: {ex.Message}");
                }
            }
            else
            {
                MessageBox.Show("rus 폴더가 존재하지 않습니다.");
            }

            
        }

    }
}

- ViewModels/MainViewModel.cs
using System.ComponentModel;

namespace WpfApp2.ViewModels
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private bool _isLoading;
        public bool IsLoading
        {
            get => _isLoading;
            set
            {
                _isLoading = value;
                OnPropertyChanged(nameof(IsLoading));
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected virtual void OnPropertyChanged(string propertyName)
            => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}

- Converters/BoolToVisibilityConverter.cs
using System;
using System.Globalization;
using System.Windows;
using System.Windows.Data;

namespace WpfApp2.Converters
{
    // true -> Visible
    // false -> Collapsed

    public class BoolToVisibilityConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if(value is bool booleanValue) 
                return booleanValue ? Visibility.Visible : Visibility.Collapsed;

            return Visibility.Collapsed;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if(value is Visibility visibility)
                return visibility == Visibility.Visible;

            return false;
        }
    }
}

-ImageProcessing/ CannyEdge.cs
using System;
using System.Windows.Media.Imaging;
using System.Windows;
using System.Threading.Tasks;
using System.Windows.Controls;

namespace WpfApp2.ImageProcessing
{
    public class CannyEdgeProcessor
    {
        public async Task<WriteableBitmap> ApplyCannyEdgeDetectionAsync(WriteableBitmap writeableBitmap, TextBlock processTimeTextBlock)
        {
            int width = writeableBitmap.PixelWidth;
            int height = writeableBitmap.PixelHeight;

            var pixelData = new byte[width * height * 4];
            writeableBitmap.CopyPixels(pixelData, width * 4, 0);

            var gradientData = new byte[width * height];

            int[] gx = { -1, 0, 1, -2, 0, 2, -1, 0, 1 };
            int[] gy = { -1, -2, -1, 0, 0, 0, 1, 2, 1 };

            var startTime = DateTime.Now;

            await Task.Run(() =>
            {
                Parallel.For(1, height - 1, y =>
                {
                    for (int x = 1; x < width - 1; x++)
                    {
                        int pixelIndex = (y * width + x) * 4;
                        double gradX = 0;
                        double gradY = 0;

                        for (int ky = -1; ky <= 1; ky++)
                        {
                            for (int kx = -1; kx <= 1; kx++)
                            {
                                int neighborIndex = ((y + ky) * width + (x + kx)) * 4;
                                byte intensity = pixelData[neighborIndex];
                                gradX += intensity * gx[(ky + 1) * 3 + (kx + 1)];
                                gradY += intensity * gy[(ky + 1) * 3 + (kx + 1)];
                            }
                        }

                        double gradientMagnitude = Math.Sqrt(gradX * gradX + gradY * gradY);
                        gradientData[y * width + x] = (byte)(gradientMagnitude > 128 ? 255 : 0);
                    }
                });
            });

            await Task.Run(() =>
            {
                Parallel.For(0, height, y =>
                {
                    for (int x = 0; x < width; x++)
                    {
                        int pixelIndex = (y * width + x) * 4;
                        byte edge = gradientData[y * width + x];
                        pixelData[pixelIndex] = edge;
                        pixelData[pixelIndex + 1] = edge;
                        pixelData[pixelIndex + 2] = edge;
                    }
                });
            });

            var totalElapsedTime = DateTime.Now - startTime;

            writeableBitmap.Lock();
            writeableBitmap.WritePixels(new Int32Rect(0, 0, width, height), pixelData, width * 4, 0);
            writeableBitmap.Unlock();

            processTimeTextBlock.Text = $"캐니엣지 처리 시간: {totalElapsedTime.TotalSeconds:F2}초";
            return writeableBitmap;
        }
    }
}

- ImageProcessing/GrayScale.cs
using System;
using System.Windows.Media.Imaging;
using System.Windows;
using System.Windows.Controls;

namespace WpfApp2.ImageProcessing
{
    public class GrayscaleProcessor
    {
        public async Task<WriteableBitmap> ConvertToGrayScaleAsync(BitmapImage bitmapImage, TextBlock processTimeTextBlock)
        {
            int width = bitmapImage.PixelWidth;
            int height = bitmapImage.PixelHeight;
            var writeableBitmap = new WriteableBitmap(bitmapImage);
            var pixelData = new byte[width * height * 4];

            writeableBitmap.CopyPixels(pixelData, width * 4, 0);

            var startTime = DateTime.Now;

            await Task.Run(() =>
            {
                Parallel.For(0, height, y =>
                {
                    for (int x = 0; x < width; x++)
                    {
                        int pixelIndex = (y * width + x) * 4;
                        byte a = pixelData[pixelIndex + 3];
                        byte r = pixelData[pixelIndex + 2];
                        byte g = pixelData[pixelIndex + 1];
                        byte b = pixelData[pixelIndex];

                        byte gray = (byte)(0.3 * r + 0.59 * g + 0.11 * b);

                        pixelData[pixelIndex + 3] = a;    // Alpha
                        pixelData[pixelIndex + 2] = gray; // Red
                        pixelData[pixelIndex + 1] = gray; // Green
                        pixelData[pixelIndex] = gray;     // Blue
                    }
                });
            });

            var totalElapsedTime = DateTime.Now - startTime;

            writeableBitmap.Lock();
            writeableBitmap.WritePixels(new Int32Rect(0, 0, width, height), pixelData, width * 4, 0);
            writeableBitmap.Unlock();

            processTimeTextBlock.Text = $"그레이스케일 처리 시간: {totalElapsedTime.TotalSeconds:F2}초";
            return writeableBitmap;
        }
    }
}

-Util/FileUtils.cs

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Media.Imaging;
using System.Windows;
using System.Windows.Media;

namespace WpfApp2.Util
{
    public class FileUtils
    {
        // 이미지 파일로 저장하는 함수
        public static void SaveBitmapToPng(WriteableBitmap writeableBitmap, string filePath)
        {
            if (writeableBitmap == null)
                throw new ArgumentNullException(nameof(writeableBitmap), "WriteableBitmap이 null입니다.");

            BitmapSource clonedBitmap = null;

            // UI 스레드에서 Bitmap을 복사하고 Freeze() 호출
            Application.Current.Dispatcher.Invoke(() =>
            {
                var renderTarget = new RenderTargetBitmap(
                    writeableBitmap.PixelWidth, writeableBitmap.PixelHeight,
                    96, 96, PixelFormats.Pbgra32);

                var visual = new DrawingVisual();
                using (var context = visual.RenderOpen())
                {
                    context.DrawImage(writeableBitmap, new Rect(0, 0, writeableBitmap.PixelWidth, writeableBitmap.PixelHeight));
                }
                renderTarget.Render(visual);

                clonedBitmap = renderTarget;
                clonedBitmap.Freeze(); // 반드시 UI 스레드에서 호출해야 오류 없음
            });

            using (var stream = new FileStream(filePath, FileMode.Create))
            {
                var encoder = new PngBitmapEncoder();
                encoder.Frames.Add(BitmapFrame.Create(clonedBitmap));
                encoder.Save(stream);
            }
        }

        // 이미지 파일을 로드하여 픽셀 데이터를 반환하는 함수
        public static byte[] LoadPngToPixels(string filePath, out int width, out int height)
        {
            try
            {
                if (!System.IO.File.Exists(filePath))
                {
                    MessageBox.Show($"파일을 찾을 수 없습니다: {filePath}");
                    width = height = 0;
                    return null;
                }

                var bitmapImage = new BitmapImage();
                bitmapImage.BeginInit();
                bitmapImage.UriSource = new Uri(filePath, UriKind.Absolute);
                bitmapImage.CacheOption = BitmapCacheOption.OnLoad; // 즉시 로드하여 파일 잠김 방지
                bitmapImage.CreateOptions = BitmapCreateOptions.IgnoreImageCache; // 이미지 캐시 무시
                bitmapImage.EndInit();
                bitmapImage.Freeze(); // 스레드 안전 처리

                WriteableBitmap writeableBitmap = new WriteableBitmap(bitmapImage);

                width = writeableBitmap.PixelWidth;
                height = writeableBitmap.PixelHeight;

                var pixels = new byte[width * height * 4];

                // 픽셀 데이터 추출
                writeableBitmap.CopyPixels(pixels, width * 4, 0);

                return pixels;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"PNG 로드 실패: {ex.Message}");
                width = height = 0;
                return null;
            }
        }

        // 폴더 및 하위 파일 삭제
        public static async Task DeleteDirectoryAsync(string path)
        {
            // 폴더 내의 모든 파일 삭제
            foreach (string file in Directory.GetFiles(path))
            {
                try
                {
                    System.IO.File.Delete(file);
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"파일 삭제 오류: {ex.Message}");
                }
            }

            // 폴더 내의 모든 하위 폴더 삭제 (재귀적으로)
            foreach (string subDir in Directory.GetDirectories(path))
            {
                await DeleteDirectoryAsync(subDir); // 재귀 호출
            }

            // 최종적으로 폴더 자체 삭제
            Directory.Delete(path);
        }
    }
}

2) Python
c:\yolov5result\yolov5_inference.py
from pathlib import Path
import torch  # YOLOv5는 PyTorch 기반이므로 torch 임포트 필요

def run_inference(source, output):
    # YOLOv5 모델 로드
    model = torch.hub.load('ultralytics/yolov5', 'custom', path=r"C:\yolov5)back20250130\runs\train\exp34\weights\best.pt")  # 경로에서 \를 raw 문자열로 처리
    
    # 예측 수행
    results = model(source)  # 이미지 경로를 넣으면 결과가 나옵니다.
    
    # 결과 저장
    results.save(Path(output).parent)  # 저장 디렉터리만 지정, 파일명은 자동으로 생성

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument("--source", required=True, help="Input image path")
    parser.add_argument("--output", required=True, help="Output image path")
    args = parser.parse_args()

    run_inference(args.source, args.output)
